{% extends "partials/clean_page.twig" %}
{% import 'partials/macros.twig' as macros %}

{% block config %}
  {{ parent() }}
  {% set ExtraData = ExtraData|merge(
    {
      body_classes: 'e-page is-auth'
    }
  ) %}
{% endblock %}

{% block head %}
  {{ parent() }}
  <link rel="stylesheet" href="{{ ExtraData.assets_prefix }}/assets/css/auth.css?{{ "now"|date('U') }}">
{% endblock %}

{% block header %}{% endblock %}

{% block content %}

  <article>
    <h1 class="visually-hidden">{{ 'Secure Authorization Center'|trans }}</h1>

    <div class="e-card is-panel">

      <img class="e-modal__logo" src="{{ ExtraData.assets_prefix }}/assets/img/components/logo/cryptoapi-logo-tablet.svg" alt="{{ 'CryptoAPI.ai Logo'|trans }}">

      <div
        class="e-tabs">
        <!-- Sign In -->
        <section class="e-tabs__panel is-open" id="signin" role="tabpanel">
          <form id="loginform" novalidate>
            <header>
              <h2>{{ 'Sign In'|trans }}</h2>
              <p class="text-2ry">{{ 'AI-Powered Crypto Trading'|trans }}</p>
            </header>

            <div class="e-form__error-box" id="messagelogin" role="alert" aria-live="assertive"></div>

            <p class="e-form__text-field">
              <input id="loginemaillf" name="loginemaillf" value="{$setemail}" type="email" autocomplete="email" required placeholder="Email">
              <label for="loginemaillf">Email</label>
              <span class="e-form__error" id="error-email" role="alert" aria-live="polite">
                <small>{{ 'Enter a valid email address.'|trans }}</small>
              </span>
            </p>

            <p class="e-form__text-field">
              <input id="loginpasswordlf" name="loginpasswordlf" type="password" data-role="password" autocomplete="current-password" required placeholder="{{ 'Password'|trans }}" pattern="(?=.*[A-Za-z])(?=.*\d).{8,}" title="{{ 'Must include at least one digit, one letter, and be at least 8 characters long.'|trans }}">
              <label for="loginpasswordlf">{{ 'Password'|trans }}</label>
              <button class="e-form__password-toggle e-btn is-icon" type="button" data-role="password-toggle" title="{{ 'Show/Hide Password'|trans }}">
                {% include 'partials/icon.twig' with {name: 'eye'} %}
                {% include 'partials/icon.twig' with {name: 'eye-slash', classes: 'd-none'} %}
              </button>
              <span class="e-form__error" id="error-password-login" role="alert" aria-live="polite">
                <small>{{ 'Password is required.'|trans }} {{ 'Must include at least one digit, one letter, and be at least 8 characters long.'|trans }}</small>
              </span>
            </p>

            <label class="e-form__option">
              <input id="agreement-signin" type="checkbox" data-role="user-agreement" checked required>
              {{ 'By continuing, you agree to <a href="https://{$this_http_host}/useragreement" target="_blank">our terms</a>.'|trans|raw }}
            </label>

            <button class="e-btn is-primary w-100" data-action="submit-auth-form" type="submit">
              <span>{{ 'Sign In'|trans }}</span>
            </button>

            <!-- Кнопки входа через соцсети -->
            {% include 'partials/oauth-buttons.twig' %}

          </form>

          <footer class="e-tabs__footer">
            <button class="e-btn is-link" type="button" onclick="forgotform()">{{ 'Forgot your password?'|trans }}</button>
            <button class="e-btn is-link" type="button" data-target="signup">
              <b>{{ 'Sign Up'|trans }}</b>
            </button>
          </footer>

        </section>

        <!-- Sign Up -->
        <section class="e-tabs__panel" id="signup" role="tabpanel">
          <form id="regform" novalidate>
            <header>
              <h2>{{ 'Sign Up'|trans }}</h2>
              <p class="text-2ry">{{ 'Create an account to get started'|trans }}</p>
            </header>

            <div class="e-form__error-box" id="messagereg" role="alert" aria-live="assertive"></div>

            <p class="e-form__text-field">
              <input id="yournamelf" name="yournamelf" type="text" required placeholder="{{ 'First Name'|trans }}">
              <label for="yournamelf">{{ 'First Name'|trans }}</label>
            </p>

            <p class="e-form__text-field">
              <input id="surnamelf" name="surnamelf" type="text" required placeholder="{{ 'Second Name'|trans }}">
              <label for="surnamelf">{{ 'Second Name'|trans }}</label>
            </p>

            <p class="e-form__text-field">
              <input id="birthdate" name="birthdate" type="date" required>
              <label for="birthdate">{{ 'Birthdate'|trans }}</label>
            </p>

            <p class="e-form__text-field">
              <input id="emaillf" name="emaillf" type="email" autocomplete="email" required placeholder="Email">
              <label for="emaillf">Email</label>
              <span class="e-form__error" id="error-email-signup" role="alert" aria-live="polite">
                <small>{{ 'Enter a valid email address.'|trans }}</small>
              </span>
            </p>

            <p
              class="e-form__text-field">
              <input id="passwordlf" name="passwordlf" type="password" data-role="password" required placeholder="{{ 'Password'|trans }}" pattern="(?=.*[A-Za-z])(?=.*\d).{8,}" title="{{ 'Password must be at least 8 characters long and include at least one letter and one number.'|trans }}">
              <label for="passwordlf">{{ 'Password'|trans }}</label>
              <button class="e-form__password-toggle e-btn is-icon" type="button" data-role="password-toggle" title="{{ 'Show/Hide Password'|trans }}">
                {% include 'partials/icon.twig' with {name: 'eye'} %}
                {% include 'partials/icon.twig' with {name: 'eye-slash', classes: 'd-none'} %}
              </button>
              <small class="e-form__hint">
                {{ 'Must include at least one digit, one letter, and be at least 8 characters long.'|trans }}
              </small>
              <span class="e-form__error" id="error-password" role="alert" aria-live="polite">
                <small>{{ 'Password is required.'|trans }} {{ 'Must include at least one digit, one letter, and be at least 8 characters long.'|trans }}</small>
              </span>
              <button class="e-btn is-link e-form__generate" type="button" data-action="generatepassword">
                {{ 'Generate password'|trans }}
              </button>
            </p>

            <label class="e-form__option">
              <input id="agreement-signup" type="checkbox" data-role="user-agreement" checked required>
              By continuing, you agree to
              <a href="https://{$this_http_host}/useragreement" target="_blank">our terms</a>.
            </label>

            <button class="e-btn is-primary w-100" data-action="submit-auth-form" type="submit">
              <span>{{ 'Sign Up'|trans }}</span>
            </button>

            <!-- Кнопки входа через соцсети -->
            {% include 'partials/oauth-buttons.twig' %}

          </form>

          <footer class="e-tabs__footer">
            <button class="e-btn is-link" type="button" data-target="signin">
              {% include 'partials/icon.twig' with {name: 'sm-chevron-left'} %}
              {{ 'Already registered?'|trans }}
              <b>{{ 'Sign In'|trans }}</b>
            </button>
          </footer>

        </section>

        <!-- Reset Password -->
        <section
          class="e-tabs__panel" id="resetpwd" role="tabpanel">
          <form id="lostpwd" novalidate>
            <header>
              <h2>{{ 'Reset Password'|trans }}</h2>
              <p class="text-2ry">{{ 'Enter your email to receive reset instructions'|trans }}</p>
            </header>

            <div class="e-form__error-box" id="messagelost" role="alert" aria-live="assertive"></div>

            <p class="e-form__text-field">
              {# Use type="email" for native validation #}
              <input id="rememberemailf" name="rememberemailf" value="{$setemail}" type="email" autocomplete="email" required placeholder="Email">
              <label for="rememberemailf">Email</label>
              <span class="e-form__error" id="error-email-restore" role="alert" aria-live="polite">
                <small>{{ 'Enter a valid email address.'|trans }}</small>
              </span>
            </p>

            <button class="e-btn is-primary w-100" data-action="submit-auth-form" type="submit">
              <span>{{ 'Get Reset Link'|trans }}</span>
            </button>

            <footer class="e-tabs__footer">
              <button class="e-btn is-link" type="button" data-target="signin">
                {{ 'Sign In'|trans }}
              </button>
              <button class="e-btn is-link" type="button" data-target="signup">
                <b>{{ 'Sign Up'|trans }}</b>
              </button>
            </footer>

          </form>
        </section>
      </div>

    </div>

    <footer class="e-footnote has-tooltip" aria-label="{{ 'Form data is pre-encrypted and transmitted over a secure SSL connection. We do not store your passwords, only their hash values (SHA-512/256), and we never share any data with third parties.'|trans }}">
      {% include 'partials/icon.twig' with {name: 'sm-lock', classes: 'is-sm'} %}
      {{ 'Your data is safe…'|trans }}
    </footer>
  </article>

{% endblock %}

{% block footer %}{% endblock %}

{% block body_suffix %}
  {{ parent() }}

  <!-- Telegram Modal -->
  {% set modal_telegram %}
  <div class="e-modal__body">
    <h2>{{ 'Login via Telegram'|trans }}</h2>
    <p>{{ 'You should connect to the bot using this link:'|trans }}
      <a href="https://t.me/{$config[TelegramBot]}" target="_blank">@QwertyAIbot</a>
    </p>
    <p>
      {{ 'And send a message: '|trans }}
      <strong id="msgcode"></strong><br>
      {{ 'The code is valid'|trans }}
      <strong id="msgsec"></strong>
      {{ 'sec.'|trans }}
    </p>
    <button class="e-btn" type="button" data-action="cancelauth">{{ 'Cancel'|trans }}</button>
  </div>
  {% endset %}
  {{ macros.modal('loginmsgwin', modal_telegram, ExtraData.assets_prefix) }}

  <!-- Email Sent Modal -->
  {% set modal_email %}
  <div class="e-modal__body">
    <h2>{{ 'Please pay attention!'|trans }}</h2>
    <p>{{ 'We sent you a link to verify your email address. Don’t forget to check your Spam folder.'|trans }}</p>
    <p id="waitsend">
      <b>{{ 'Please, wait'|trans }}
        <span id="waitsec"></span>
        {{ 'sec.'|trans }}</b>
    </p>
    <p id="difemail" style="display:none;">
      {{ 'If this attempt fails, use a different email address.'|trans }}
    </p>
    <div id="resend">
      <button class="e-btn" type="button" data-action="resend">
        {{ 'Send via another server'|trans }}
      </button>
    </div>
  </div>
  {% endset %}
  {{ macros.modal('sended', modal_email, ExtraData.assets_prefix) }}

  <!-- Loader -->
  <div id="loader">{{ 'Loading...'|trans }}</div>

  <script type="module">
    import { showToast } from '{{ ExtraData.assets_prefix }}/assets/js/toast.js';

   /**
    * Переключение на вкладку восстановления пароля.
    * Функция добавлена только потому, что сервер возвращает строку с ее вызовом.
    */
    function forgotform() {
      document
        .querySelectorAll('.e-tabs__panel[role="tabpanel"]')
        .forEach((panel) => panel.classList.remove('is-open'));
      const activePanel = document.getElementById('resetpwd');

      if (activePanel) {
        activePanel.classList.add('is-open');
        // Прокрутка к началу формы
        const container = activePanel.closest('.e-card') || document.body;
        container.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        // console.warn('Reset password panel (#resetpwd) not found.');
      }
    }

   /**
    * Шифрование ROT13 (сервер принимает в таком виде)
    */
    function strRot13(str) {
      return str.replace(/[a-zA-Z]/g, (char) => {
        const isUpperCase = char <= 'Z';
        const base = isUpperCase ? 65 : 97;
        const charCode = char.charCodeAt(0);
        return String.fromCharCode(((charCode - base + 13) % 26) + base);
      });
    }

   /**
    * Модуль управления аутентификацией и регистрацией
    * @module AuthModule
    */
    const AuthModule = (() => {
     /**
      * ------------------------------------------------------------------------
      * ПЕРЕМЕННЫЕ
      * ------------------------------------------------------------------------
      */
      const SELECTORS = {
        tabs: {
          signin: 'signin',
          signup: 'signup',
          resetpwd: 'resetpwd',
        },
        buttons: {
          submitAuthForm: '[data-action="submit-auth-form"]',
          generatePassword: '[data-action="generatepassword"]',
          cancelAuth: '[data-action="cancelauth"]', // For modal #loginmsgwin
          resendMail: '[data-action="resend"]', // For modal #sended
          passwordToggle: '[data-role="password-toggle"]', // More specific
        },
        oauth: {
          google: '[data-oauth="google"]',
        },
        messengers: {
          telegram: '[data-msg="telegram"]',
        },
        elements: {
          loader: '#loader',
          userAgreement: '[data-role="user-agreement"]', // Used as base selector
          message: {
            login: '#messagelogin',
            reg: '#messagereg',
            lost: '#messagelost',
          },
          modals: {
            sendStatus: '#sended',
            loginMsgWindow: '#loginmsgwin',
          },
          messengerCode: '#msgcode',
          messengerTimer: '#msgsec',
          // Elements for mail countdown
          mailWaitSec: '#waitsec',
          mailWaitSend: '#waitsend',
          mailResend: '#resend',
          mailDifEmail: '#difemail',
        },
        forms: {
          login: '#loginform',
          register: '#regform',
          reset: '#lostpwd',
        },
        inputs: {
          // Specific input IDs used in performAuthAction
          loginEmail: '#loginemaillf',
          loginPassword: '#loginpasswordlf',
          regName: '#yournamelf',
          regSurname: '#surnamelf',
          regBirthdate: '#birthdate',
          regEmail: '#emaillf',
          regPassword: '#passwordlf',
          resetEmail: '#rememberemailf',
          passwordField: '[data-role="password"]', // Selector for password fields for toggle
        },
        tabPanel: '.e-tabs__panel',
        tabPanelOpen: '.e-tabs__panel.is-open',
      };

      const POLLING_INTERVAL_MS = 3000;
      const POLLING_TIMEOUT_MS = 300000;

      let msgcode = null;
      let msgPollingInterval = null;
      let msgPollingTimeout = null;
      let msgPollingActive = false;
      const currentClientTimeZoneOffset = -new Date().getTimezoneOffset() / 60;
      let mailCountdownInterval = null; // Store interval ID for mail countdown
      let mailRetryCount = 0;

     /**
      * ------------------------------------------------------------------------
      * ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
      * ------------------------------------------------------------------------
      */

      const toggleLoader = (show) => {
        const loader = document.querySelector(SELECTORS.elements.loader);
        if (loader) {
          loader.style.display = show ? 'flex' : 'none';
        }
      };

     /**
      * Переключение вкладок
      */
      function switchTab(tabId) {
        document
          .querySelectorAll(SELECTORS.tabPanel)
          .forEach((panel) => panel.classList.remove('is-open'));
        const activePanel = document.getElementById(tabId);

        if (activePanel) {
          activePanel.classList.add('is-open');
          const container = activePanel.closest('.e-card') || document.body;
          container.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // else {
        //   console.warn(`Tab panel with ID "${tabId}" not found.`);
        // }
      }

     /**
      * Таймер обратного отсчета для отправки почты
      * @param {number} seconds - Количество секунд
      */
      function mailCountdown(seconds) {
        // Очистка предыдущего таймера, если он существует
        if (mailCountdownInterval) {
          clearInterval(mailCountdownInterval);
          mailCountdownInterval = null;
        }

        const waitSecEl = document.querySelector(SELECTORS.elements.mailWaitSec);
        const waitSendEl = document.querySelector(SELECTORS.elements.mailWaitSend);
        const resendEl = document.querySelector(SELECTORS.elements.mailResend);
        const difEmailEl = document.querySelector(SELECTORS.elements.mailDifEmail);

        if (!waitSecEl || !waitSendEl || !resendEl || !difEmailEl) {
          // console.warn('Email countdown elements not found.');
          return;
        }

        let timeLeft = seconds;

        waitSendEl.style.display = 'block';
        resendEl.style.display = 'none';
        // Предложение использовать другой email-адрес
        difEmailEl.style.display = mailRetryCount > 0 ? 'block' : 'none';

        const updateTimer = () => {
          waitSecEl.textContent = timeLeft;
        };

        updateTimer();

        mailCountdownInterval = setInterval(() => {
          timeLeft -= 1;
          updateTimer();

          if (timeLeft <= 0) {
            clearInterval(mailCountdownInterval);
            mailCountdownInterval = null;
            waitSendEl.style.display = 'none';
            resendEl.style.display = 'block';
          }
        }, 1000);
      }

     /**
      * ------------------------------------------------------------------------
      * ОСНОВНЫЕ ФУНКЦИИ
      * ------------------------------------------------------------------------
      */

      const makeRequest = async (url, data, responseType = 'text') => {
        toggleLoader(true);
        try {
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(data),
          });

          if (!response.ok) {
            let errorText = `HTTP error! status: ${response.status}`;
            try {
              const bodyText = await response.text();
              if (bodyText) errorText += ` - ${bodyText.substring(0, 100)}`;
            } catch (e) {
              /* Ignore if body can't be read */
            }
            throw new Error(errorText);
          }

          if (responseType === 'json') {
            return await response.json();
          }
          return await response.text();
        } catch (error) {
          // console.error('Request failed:', error);
          showToast('{{ "Request error."|trans|e("js") }}', 'error');
          throw error;
        } finally {
          toggleLoader(false);
        }
      };

     /**
      * ------------------------------------------------------------------------
      * ВХОД / РЕГИСТРАЦИЯ / ВОССТАНОВЛЕНИЯ
      * ------------------------------------------------------------------------
      */
      const configMap = {
        signin: {
          formSelector: SELECTORS.forms.login,
          url: 'register.php',
          data: (form) => ({
            loginemail: form.querySelector(SELECTORS.inputs.loginEmail).value,
            loginpassword: strRot13(
              form.querySelector(SELECTORS.inputs.loginPassword).value
            ),
          }),
          messageEl: SELECTORS.elements.message.login,
          successAction: () => {
            window.location.href = '{$returl}';
          },
        },
        signup: {
          formSelector: SELECTORS.forms.register,
          url: 'register.php',
          data: (form) => ({
            email: form.querySelector(SELECTORS.inputs.regEmail).value,
            password: form.querySelector(SELECTORS.inputs.regPassword).value,
            yourname: form.querySelector(SELECTORS.inputs.regName).value,
            surname: form.querySelector(SELECTORS.inputs.regSurname).value,
            birthdate: form.querySelector(SELECTORS.inputs.regBirthdate).value,
            blogname: 'registrationonly',
            mailretry: mailRetryCount,
            // На всякий случай
            gender: 'not chosen',
            nickname: '',
            country: '',
            city: '',
          }),
          messageEl: SELECTORS.elements.message.reg,
          successAction: () => {
            mailRetryCount = 0;
            const dialog = document.querySelector(
              SELECTORS.elements.modals.sendStatus
            );
            if (dialog) {
              if (!dialog.open) dialog.showModal();

              mailCountdown(60);
            }
          },
        },
        resetpwd: {
          formSelector: SELECTORS.forms.reset,
          url: 'register.php',
          data: (form) => ({
            rememberemail: form.querySelector(SELECTORS.inputs.resetEmail).value,
            mailretry: mailRetryCount,
          }),
          messageEl: SELECTORS.elements.message.lost,
          successAction: () => {
            mailRetryCount = 0;
            const dialog = document.querySelector(
              SELECTORS.elements.modals.sendStatus
            );
            if (dialog) {
              if (!dialog.open) dialog.showModal();

              mailCountdown(60);
            }
          },
        },
      };

     /**
      * Действия аутентификации на основе полученного типа.
      * @param {string} type - Тип действия ('signin', 'signup', 'resetpwd').
      */
      async function performAuthAction(type) {
        const config = configMap[type];
        if (!config) {
          // console.error('Invalid auth action type:', type);
          return;
        }

        const formElement = document.querySelector(config.formSelector);
        const messageElement = document.querySelector(config.messageEl);

        if (!formElement || !messageElement) {
          // console.error('Form or message element not found for action:', type);
          return;
        }

        messageElement.innerHTML = '';

        if (!formElement.checkValidity()) {
          messageElement.innerHTML =
            '{{ "Please fix the errors in the form before submitting."|trans|e("js") }}';
          const firstInvalid = formElement.querySelector(':user-invalid');
          firstInvalid?.focus();
          return;
        }

        toggleLoader(true);

        try {
          const requestBaseData = {
            thisprojectid: '{$thisprojectid}',
            this_http_host: '{$this_http_host}',
            checkID: '{$startruntime}',
            userUTC: currentClientTimeZoneOffset,
            lng: '{$user_lng}',
            returnurl: '{$returl}',
          };
          const specificData = config.data(formElement);
          const requestData = {
            ...requestBaseData,
            ...specificData,
          };

          const result = await makeRequest(config.url, requestData);

          if (result === 'OK') {
            config.successAction();
          } else {
            // Показать сообщение об ошибке, предоставленное сервером
            messageElement.innerHTML = `${result || '{{ "Request error."|trans|e("js") }}'}`;
            // Если попытка отправки почты была неудачной, обновим счетчик
            if (type === 'signup' || type === 'resetpwd') {
              mailRetryCount += 1;
            }
          }
        } catch (error) {
          messageElement.innerHTML = '{{ "Request error."|trans|e("js") }}';
          if (type === 'signup' || type === 'resetpwd') {
            mailRetryCount += 1;
          }
        } finally {
          toggleLoader(false);
        }
      }

     /**
      * ------------------------------------------------------------------------
      * ВХОД ЧЕРЕЗ МЕССЕНДЖЕР (Logic largely unchanged, just formatting)
      * ------------------------------------------------------------------------
      */
      const stopMessengerPolling = async (
        cancelledByUser = false,
        notifyServer = false
      ) => {
        if (!msgPollingActive) return;

        clearInterval(msgPollingInterval);
        clearTimeout(msgPollingTimeout);
        msgPollingInterval = null;
        msgPollingTimeout = null;
        msgPollingActive = false;

        const dialog = document.querySelector(
          SELECTORS.elements.modals.loginMsgWindow
        );
        if (dialog && dialog.open) {
          dialog.close();
        }

        if (cancelledByUser) {
          showToast('{{ "Login canceled."|trans|e("js") }}', 'info');
          if (notifyServer && msgcode) {
            toggleLoader(true);
            try {
              await makeRequest('./initmsgreg.php', {
                cancelinit: msgcode,
                thisprojectid: '{$thisprojectid}',
              });
            } catch (error) {
              showToast(
                `{{ "Failed to send cancellation request:"|trans|e("js") }} ${error}`,
                'error'
              );
            } finally {
              toggleLoader(false);
              msgcode = null;
            }
          } else {
            msgcode = null;
          }
        }
      };

      const startMessengerPolling = (code, durationSeconds) => {
        if (msgPollingActive) {
          // console.warn('Polling is already active.');
          return;
        }

        msgcode = code;
        msgPollingActive = true;
        let timeLeft = durationSeconds;

        const codeEl = document.querySelector(SELECTORS.elements.messengerCode);
        const timerEl = document.querySelector(SELECTORS.elements.messengerTimer);
        const dialog = document.querySelector(
          SELECTORS.elements.modals.loginMsgWindow
        );

        if (!codeEl || !timerEl || !dialog) {
          // console.error('Messenger polling UI elements not found!');
          msgPollingActive = false;
          msgcode = null;
          showToast(
            '{{ "UI elements not found, please try again."|trans|e("js") }}',
            'error'
          );
          return;
        }

        codeEl.textContent = code;
        const updateTimerDisplay = () => {
          timerEl.textContent = timeLeft;
        };
        updateTimerDisplay();

        if (!dialog.open) {
          dialog.showModal();
        }

        const poll = async () => {
          if (!msgPollingActive) return;

          // console.log('Polling messenger status for code:', msgcode);

          try {
            const response = await makeRequest(
              './initmsgreg.php',
              {
                checkinit: msgcode,
                thisprojectid: '{$thisprojectid}',
              },
              'json'
            );

            console.log('Poll response:', response);

            if (!msgPollingActive) return;

            if (Array.isArray(response) && response.length > 0) {
              const status = response[0];
              // console.log('Status received:', status);
              if (status === 'LOG') {
                stopMessengerPolling();
                window.location.href = '{$returl}';
              } else if (status === 'OK') {
                // console.log('Status OK, continuing polling');
                // Ожидаем, пока пользователь введёт код
              } else {
                // Не закрываем окно, а показываем сообщение об ошибке
                // console.warn('Server returned an error:', status);
                // Показываем ошибку, но не останавливаем опрос
                showToast(status, 'warning');
              }
            } else {
              // console.warn('Unexpected response format:', response);
              showToast(
                '{{ "Unexpected server response format"|trans|e("js") }}',
                'error'
              );
            }
          } catch (error) {
            // console.error('Polling request failed:', error);
            showToast('{{ "Request error."|trans|e("js") }}', 'error');
          }
        };

        msgPollingInterval = setInterval(() => {
          timeLeft -= 1;
          updateTimerDisplay();

          if (timeLeft <= 0) {
            stopMessengerPolling();
            showToast(
              '{{ "Timeout expired. Try requesting the code again."|trans|e("js") }}',
              'warning'
            );
            return;
          }

          if (timeLeft % Math.round(POLLING_INTERVAL_MS / 1000) === 0) {
            poll();
          }
        }, 1000);

        msgPollingTimeout = setTimeout(() => {
          if (msgPollingActive) {
            stopMessengerPolling();
            showToast(
              '{{ "Timeout expired. Try requesting the code again."|trans|e("js") }}',
              'warning'
            );
          }
        }, POLLING_TIMEOUT_MS);
        // Первый опрос начнётся через POLLING_INTERVAL_MS (3 секунды)
      };

     /**
      * Проверка согласия с пользовательским соглашением.
      * @returns {boolean} True, если флажок поставлен.
      */
      function isUserAgreementChecked() {
        const openPanel = document.querySelector(SELECTORS.tabPanelOpen);
        if (
          !openPanel ||
          (openPanel.id !== 'signin' && openPanel.id !== 'signup')
        ) {
          return true;
        }
        const agreementCheckbox = openPanel.querySelector(
          SELECTORS.elements.userAgreement
        );
        if (agreementCheckbox && !agreementCheckbox.checked) {
          showToast(
            '{{ "Please agree to the terms of service."|trans|e("js") }}',
            'warning'
          );
          agreementCheckbox.focus();
          return false;
        }
        return true;
      }

     /**
      * ------------------------------------------------------------------------
      * Инициализация обработчиков событий
      * ------------------------------------------------------------------------
      */
      function initEventListeners() {
        const rootElement = document.body;

        rootElement.addEventListener('click', async (event) => {
          const { target } = event;

          // Переключение вкладок
          const tabTargetButton = target.closest('[data-target]');
          if (tabTargetButton && SELECTORS.tabs[tabTargetButton.dataset.target]) {
            event.preventDefault();
            switchTab(tabTargetButton.dataset.target);
            return;
          }

          // Отправка формы
          const submitButton = target.closest(SELECTORS.buttons.submitAuthForm);
          if (submitButton) {
            event.preventDefault();
            const form = submitButton.closest('form');
            const activeTabPanel = form?.closest(SELECTORS.tabPanelOpen);
            if (form && activeTabPanel) {
              const action = activeTabPanel.id;
              // 'signin', 'signup', 'resetpwd'

              // Проверка согласия с пользовательским соглашением
              if (action === 'signin' || action === 'signup') {
                if (!isUserAgreementChecked()) return;
              }

              if (action && configMap[action]) {
                await performAuthAction(action);
              }

              // else {
              //   console.error(
              //     'Could not determine auth action for form in panel:',
              //     activeTabPanel.id
              //   );
              // }
            }

            // else {
            //   console.error(
            //     'Submit button clicked outside of an active form/tab panel.'
            //   );
            // }
            return;
          }

          // OAuth: Google
          const googleButton = target.closest(SELECTORS.oauth.google);
          if (googleButton) {
            event.preventDefault();
            if (!isUserAgreementChecked()) return;

            const googleUrl = '{$googleurl}';
            if (googleUrl) {
              window.location.href = `${googleUrl}|${currentClientTimeZoneOffset}`;
            } else {
              // console.error('Google OAuth URL is not defined.');
              showToast(
                '{{ "Google login is unavailable."|trans|e("js") }}',
                'error'
              );
            }
            return;
          }

          // Telegram
          const telegramButton = target.closest(SELECTORS.messengers.telegram);
          if (telegramButton) {
            // console.log('Telegram button clicked');
            event.preventDefault();
            if (!isUserAgreementChecked()) return;

            toggleLoader(true);
            try {
              // console.log('Sending request to initmsgreg.php');
              const response = await makeRequest(
                './initmsgreg.php',
                {
                  initsec: '{$hello_cookie}{$unloggedid}',
                  thisprojectid: '{$thisprojectid}',
                },
                'json'
              );
              // console.log('Response received:', response);

              if (Array.isArray(response) && response.length > 0) {
                const status = response[0];
                if (status === 'LOG') {
                  window.location.reload();
                } else if (status === 'OK') {
                  const code = response[1] * 1;
                  const duration = 300;
                  startMessengerPolling(`A${code}`, duration);
                } else {
                  showToast(`{{ "Error:"|trans|e("js") }} ${response[0]}`, 'error');
                }
              } else {
                showToast(
                  '{{ "Failed to retrieve the verification code."|trans|e("js") }}',
                  'error'
                );
              }
            } catch (error) {
              showToast('{{ "Request error."|trans|e("js") }}', 'error');
            } finally {
              toggleLoader(false);
            }
            return;
          }

          // Отмена авторизации через мессенджер
          const cancelAuthButton = target.closest(SELECTORS.buttons.cancelAuth);
          if (cancelAuthButton) {
            stopMessengerPolling(true, true);
            return;
          }

          // Повторная оотправка email
          const resendButton = target.closest(SELECTORS.buttons.resendMail);
          if (resendButton) {
            let lastAction = null;
            if (document.querySelector(SELECTORS.elements.message.reg)?.innerHTML)
              lastAction = 'signup';
            else if (
              document.querySelector(SELECTORS.elements.message.lost)?.innerHTML
            )
              lastAction = 'resetpwd';

            if (lastAction) {
              mailRetryCount += 1;
              const resendEl = document.querySelector(
                SELECTORS.elements.mailResend
              );
              const waitSendEl = document.querySelector(
                SELECTORS.elements.mailWaitSend
              );
              const difEmailEl = document.querySelector(
                SELECTORS.elements.mailDifEmail
              );
              if (resendEl) resendEl.style.display = 'none';

              if (waitSendEl) waitSendEl.style.display = 'block';

              if (difEmailEl) difEmailEl.style.display = 'block';
              mailCountdown(60);

              await performAuthAction(lastAction);
            } else {
              showToast(
                '{{ "Could not determine action to retry."|trans|e("js") }}',
                'warning'
              );
            }
            return;
          }

          // Генерация пароля
          const generatePasswordButton = target.closest(
            SELECTORS.buttons.generatePassword
          );
          if (generatePasswordButton) {
            event.preventDefault();
            try {
              const generatedPassword = await makeRequest('index.php', {
                genpwd: 10,
              });

              const pwdField = document.getElementById(
                SELECTORS.inputs.regPassword.substring(1)
              );
              const pwdFieldContainer = pwdField?.closest('.e-form__text-field');
              const toggleButton = pwdFieldContainer?.querySelector(
                SELECTORS.buttons.passwordToggle
              );
              const eyeIcon = toggleButton?.querySelector('[name="eye"]');
              const eyeSlashIcon =
                toggleButton?.querySelector('[name="eye-slash"]');

              if (pwdField) {
                pwdField.type = 'text';
                pwdField.value = generatedPassword;
                pwdFieldContainer?.classList.add('is-active', 'is-filled');
                eyeIcon?.classList.add('d-none');
                eyeSlashIcon?.classList.remove('d-none');
                pwdField.dispatchEvent(new Event('input', { bubbles: true }));
              }

              // else {
              //   console.warn(
              //     'Password field #passwordlf not found for generation.'
              //   );
              // }
            } catch (error) {
              showToast(
                '{{ "Failed to generate password."|trans|e("js") }}',
                'error'
              );
            }
            return;
          }

          // Переключение видимости пароля
          const passwordToggleButton = target.closest(
            SELECTORS.buttons.passwordToggle
          );
          if (passwordToggleButton) {
            const fieldContainer = passwordToggleButton.closest(
              '.e-form__text-field'
            );
            const passwordInput = fieldContainer?.querySelector(
              SELECTORS.inputs.passwordField
            );

            const eyeIcon = passwordToggleButton.querySelector('[name="eye"]');
            const eyeSlashIcon =
              passwordToggleButton.querySelector('[name="eye-slash"]');

            if (passwordInput && eyeIcon && eyeSlashIcon) {
              if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                eyeIcon.classList.add('d-none');
                eyeSlashIcon.classList.remove('d-none');
              } else {
                passwordInput.type = 'password';
                eyeIcon.classList.remove('d-none');
                eyeSlashIcon.classList.add('d-none');
              }
            }
          }
        });
      }

     /**
      * ------------------------------------------------------------------------
      * Публичный интерфейс модуля
      * ------------------------------------------------------------------------
      */
      return {
        init() {
          const hash = window.location.hash.substring(1);
          const initialTab = SELECTORS.tabs[hash] ? hash : 'signin';
          requestAnimationFrame(() => switchTab(initialTab));

          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initEventListeners);
          } else {
            initEventListeners();
          }
        },
        getCurrentTab() {
          const activePanel = document.querySelector(SELECTORS.tabPanelOpen);
          return activePanel ? activePanel.id : null;
        },
      };
    })();

    // Инициализация модуля
    AuthModule.init();

  </script>
{% endblock %}
